// This is an autogenerated file from Firebase Studio.
'use server';

/**
 * @fileOverview An expert AI responder agent.
 *
 * - respond - A function that handles the initial response generation.
 * - RespondInput - The input type for the respond function.
 * - RespondOutput - The return type for the respond function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const RespondInputSchema = z.object({
  query: z.string().describe('The question to be answered.'),
});
export type RespondInput = z.infer<typeof RespondInputSchema>;

const RespondOutputSchema = z.object({
  answer: z.string().describe('A comprehensive, well-reasoned answer to the question.'),
});
export type RespondOutput = z.infer<typeof RespondOutputSchema>;

export async function respond(input: RespondInput): Promise<RespondOutput> {
  return respondFlow(input);
}

const prompt = ai.definePrompt({
  name: 'respondPrompt',
  input: {schema: RespondInputSchema},
  output: {schema: RespondOutputSchema},
  prompt: `You are an expert responder agent in a critical thinking system. 
Provide a comprehensive, well-reasoned answer to this question: "{{{query}}}"

Your response should be:
- Thorough but concise (2-3 paragraphs)
- Based on established knowledge
- Clear and well-structured
- Confident but not overreaching

Focus on accuracy and clarity. This is the initial response that will be analyzed by other agents.`,
});

const respondFlow = ai.defineFlow(
  {
    name: 'respondFlow',
    inputSchema: RespondInputSchema,
    outputSchema: RespondOutputSchema,
  },
  async (input): Promise<RespondOutput> => {
    try {
      const {output} = await prompt(input);

      // Validate output structure
      if (output && typeof output.answer === 'string') {
        return output;
      } else {
        console.warn(
          'ResponderAgent output is not valid or answer is not a string. LLM may not be conforming to schema. Output:',
          output
        );
        return {answer: ""}; // Return default to maintain type safety
      }
    } catch (error) {
      console.error('Error in respondFlow:', error);
      // Re-throw the error to let the orchestrator know something went wrong.
      throw error;
    }
  }
);

